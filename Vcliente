package com.example.elixiresdelavida;

// Importamos librerías
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.ImageButton;
import android.widget.NumberPicker;
import android.widget.TextView;
import android.widget.Button;
import android.widget.Toast;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import java.util.HashMap;
import java.util.Map;

public class VClienteOnl extends AppCompatActivity {

    // Creamos las variables necesarias
    Map<Integer, Integer> cantidades = new HashMap<>();
    Map<Integer, Double> precios = new HashMap<>();
    Map<Integer, String> nombres = new HashMap<>();
    TextView tvTotal;
    Button btnRealizarCompra, btnLimpiarSeleccion, btnregresar;
    DB_Proy db_proy;
    int idCliente;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_vcliente_onl);

        // Vinculamos los controles
        tvTotal = findViewById(R.id.tvTotal);
        btnRealizarCompra = findViewById(R.id.btnRealizarCompra);
        btnLimpiarSeleccion = findViewById(R.id.btnLimpiar);
        btnregresar = findViewById(R.id.btnregresar);

        // Se crea la instancia de la base de datos
        db_proy = new DB_Proy(this);

        // Obtenemos el id del cliente mediante el inicio de sesión
        idCliente = getIntent().getIntExtra("id_cliente", -1);

        // Precios de los productos
        precios.put(R.id.produc1, 300.00);
        precios.put(R.id.produc2, 280.00);
        precios.put(R.id.produc3, 90.00);
        precios.put(R.id.produc4, 370.00);
        precios.put(R.id.produc5, 45.00);
        precios.put(R.id.produc6, 2000.00);
        precios.put(R.id.produc7, 35.00);
        precios.put(R.id.produc8, 60.00);

        // Nombres de los productos
        nombres.put(R.id.produc1, "Whiskey Blue Label");
        nombres.put(R.id.produc2, "Champagne Dom Perignon");
        nombres.put(R.id.produc3, "Tequila Don Julio");
        nombres.put(R.id.produc4, "Whiskey Macallan 18");
        nombres.put(R.id.produc5, "Gin Bombay Saphire");
        nombres.put(R.id.produc6, "Chateau Margaux");
        nombres.put(R.id.produc7, "Whiskey Jack Daniel's");
        nombres.put(R.id.produc8, "Caprili Brunello di Montalcino");

        // Asignar listener a cada imagen de producto
        int[] productos = {
                R.id.produc1, R.id.produc2, R.id.produc3,
                R.id.produc4, R.id.produc5, R.id.produc6,
                R.id.produc7, R.id.produc8
        };

        // Al seleccionar el producto muestra la cantidad
        for (int id : productos) {
            ImageButton producto = findViewById(id);
            producto.setOnClickListener(v -> mostrarSelectorCantidad(id));
        }

        // Botón que realiza la compra mediante un método
        btnRealizarCompra.setOnClickListener(v -> mostrarResumenCompra());

        // Botón para limpiar campos
        btnLimpiarSeleccion.setOnClickListener(v -> {
            cantidades.clear();
            tvTotal.setText("Total: $0.00");
            Toast.makeText(VClienteOnl.this, "Selección limpiada", Toast.LENGTH_SHORT).show();
        });

        // Botón para regresar a la pantalla anterior
        btnregresar.setOnClickListener(new View.OnClickListener() {
            @Override public void onClick(View v) {
                Intent intent = new Intent(VClienteOnl.this, InicioSesion.class);
                startActivity(intent);
            }
        });
    }

    // Permite que no se pueda regresar tocando el boton regresar del telefono
    @Override
    public void onBackPressed() {

    }

    // Método que muestra la cantidad que hay en stock del producto seleccionado en la base de datos
    private void mostrarSelectorCantidad(int productoIdVista) {
        try {
            String nombreProducto = nombres.get(productoIdVista);
            if (nombreProducto == null) {
                Toast.makeText(this, "Producto no encontrado en el mapa nombres", Toast.LENGTH_SHORT).show();
                return;
            }

            int idRealProducto = db_proy.obtenerIdProductoPorNombre(nombreProducto);
            if (idRealProducto == -1) {
                Toast.makeText(this, "Producto no existe en base de datos", Toast.LENGTH_SHORT).show();
                return;
            }

            int maxCantidad = db_proy.obtenerCantidadDisponible(idRealProducto);
            if (maxCantidad <= 0) {
                Toast.makeText(this, "Producto sin stock", Toast.LENGTH_SHORT).show();
                return;
            }

            NumberPicker picker = new NumberPicker(this);
            picker.setMinValue(1);
            picker.setMaxValue(maxCantidad);
            picker.setWrapSelectorWheel(true);

            new AlertDialog.Builder(this)
                    .setTitle("Selecciona cantidad")
                    .setView(picker)
                    .setPositiveButton("Aceptar", (dialog, which) -> {
                        int cantidad = picker.getValue();
                        cantidades.put(productoIdVista, cantidad);
                        actualizarTotal();
                    })
                    .setNegativeButton("Cancelar", null)
                    .show();

        } catch (Exception e) {
            e.printStackTrace();
            Toast.makeText(this, "Error al seleccionar producto: " + e.getMessage(), Toast.LENGTH_LONG).show();
        }
    }

    // Método que actualiza el total según las compras del cliente
    private void actualizarTotal() {
        double subtotal = 0;

        for (Map.Entry<Integer, Integer> entry : cantidades.entrySet()) {
            int id = entry.getKey();
            int cantidad = entry.getValue();
            double precio = precios.get(id);
            subtotal += cantidad * precio;
        }

        double impuesto = subtotal * 0.10;
        double totalConImpuesto = subtotal + impuesto;

        tvTotal.setText(String.format("Total: $%.2f (incluye 10%% impuesto)", totalConImpuesto));
    }

    // Método que muestra la factura de compra
    private void mostrarResumenCompra() {
        if (cantidades.isEmpty()) {
            Toast.makeText(this, "No has seleccionado ningún producto.", Toast.LENGTH_SHORT).show();
            return;
        }

        if (idCliente == -1) {
            Toast.makeText(this, "Error: No se encontró el ID del cliente.", Toast.LENGTH_SHORT).show();
            return;
        }

        StringBuilder resumen = new StringBuilder("Resumen de compra:\n");
        double total = 0;

        for (Map.Entry<Integer, Integer> entry : cantidades.entrySet()) {
            int id = entry.getKey();
            int cantidad = entry.getValue();
            double precio = precios.get(id);
            double subtotal = cantidad * precio;
            total += subtotal;
            resumen.append(String.format("- %s x%d: $%.2f\n", nombres.get(id), cantidad, subtotal));
        }

        double impuesto = total * 0.10;
        double totalFinal = total + impuesto;
        resumen.append(String.format("\nImpuesto (10%%): $%.2f", impuesto));
        resumen.append(String.format("\nTotal a pagar: $%.2f", totalFinal));

        // Diálogo para confirmar antes de registrar
        new AlertDialog.Builder(this)
                .setTitle("Confirmar compra")
                .setMessage(resumen.toString())
                .setPositiveButton("Confirmar", (dialog, which) -> procesarCompra(totalFinal))
                .setNegativeButton("Cancelar", null)
                .show();
    }

    // Método que procesa la compra, la inserta en la base de datos y dinámicamente actualiza la base de datos
    private void procesarCompra(double totalFinal) {
        Integer idTrabajador = null;
        long idCompra = db_proy.insertarCompra(idCliente, idTrabajador, totalFinal);

        if (idCompra != -1) {
            for (Map.Entry<Integer, Integer> entry : cantidades.entrySet()) {
                int idProductoVista = entry.getKey();
                int cantidad = entry.getValue();

                // Obtener ID real para insertar detalles y reducir inventario
                String nombreProducto = nombres.get(idProductoVista);
                int idRealProducto = db_proy.obtenerIdProductoPorNombre(nombreProducto);
                double precio = precios.get(idProductoVista);

                db_proy.insertarDetalleCompra((int) idCompra, idRealProducto, cantidad, precio);
                db_proy.reducirInventario(idRealProducto, cantidad);
            }

            // Limpiar selección
            cantidades.clear();
            tvTotal.setText("Total: $0.00");

            // ✅ Mensaje final claro de compra realizada
            new AlertDialog.Builder(this)
                    .setTitle("¡Compra realizada!")
                    .setMessage("Gracias por tu compra.\nTu pedido ha sido registrado correctamente.\nID de compra: " + idCompra)
                    .setPositiveButton("Aceptar", null)
                    .show();

            Toast.makeText(this, "✅ Compra registrada correctamente", Toast.LENGTH_LONG).show();

        } else {
            Toast.makeText(this, "❌ Error al registrar la compra.", Toast.LENGTH_LONG).show();
        }
    }
}

// Gabriel Cortez, José Ramos, Kevin Rudas, 9IL-141
